// Code generated by thriftgo (0.3.1). DO NOT EDIT.

package room

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/li1553770945/sheepim-room-service/kitex_gen/base"
	"strings"
)

type CreateRoomResp struct {
	BaseResp    *base.BaseResp `thrift:"baseResp,1,required" frugal:"1,required,base.BaseResp" json:"baseResp"`
	RoomId      *string        `thrift:"roomId,2,optional" frugal:"2,optional,string" json:"roomId,omitempty"`
	ClientId    *string        `thrift:"clientId,3,optional" frugal:"3,optional,string" json:"clientId,omitempty"`
	ClientToken *string        `thrift:"clientToken,4,optional" frugal:"4,optional,string" json:"clientToken,omitempty"`
}

func NewCreateRoomResp() *CreateRoomResp {
	return &CreateRoomResp{}
}

func (p *CreateRoomResp) InitDefault() {
	*p = CreateRoomResp{}
}

var CreateRoomResp_BaseResp_DEFAULT *base.BaseResp

func (p *CreateRoomResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateRoomResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var CreateRoomResp_RoomId_DEFAULT string

func (p *CreateRoomResp) GetRoomId() (v string) {
	if !p.IsSetRoomId() {
		return CreateRoomResp_RoomId_DEFAULT
	}
	return *p.RoomId
}

var CreateRoomResp_ClientId_DEFAULT string

func (p *CreateRoomResp) GetClientId() (v string) {
	if !p.IsSetClientId() {
		return CreateRoomResp_ClientId_DEFAULT
	}
	return *p.ClientId
}

var CreateRoomResp_ClientToken_DEFAULT string

func (p *CreateRoomResp) GetClientToken() (v string) {
	if !p.IsSetClientToken() {
		return CreateRoomResp_ClientToken_DEFAULT
	}
	return *p.ClientToken
}
func (p *CreateRoomResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *CreateRoomResp) SetRoomId(val *string) {
	p.RoomId = val
}
func (p *CreateRoomResp) SetClientId(val *string) {
	p.ClientId = val
}
func (p *CreateRoomResp) SetClientToken(val *string) {
	p.ClientToken = val
}

var fieldIDToName_CreateRoomResp = map[int16]string{
	1: "baseResp",
	2: "roomId",
	3: "clientId",
	4: "clientToken",
}

func (p *CreateRoomResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateRoomResp) IsSetRoomId() bool {
	return p.RoomId != nil
}

func (p *CreateRoomResp) IsSetClientId() bool {
	return p.ClientId != nil
}

func (p *CreateRoomResp) IsSetClientToken() bool {
	return p.ClientToken != nil
}

func (p *CreateRoomResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseResp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateRoomResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateRoomResp[fieldId]))
}

func (p *CreateRoomResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateRoomResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RoomId = &v
	}
	return nil
}

func (p *CreateRoomResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClientId = &v
	}
	return nil
}

func (p *CreateRoomResp) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClientToken = &v
	}
	return nil
}

func (p *CreateRoomResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRoomResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateRoomResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateRoomResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoomId() {
		if err = oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RoomId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateRoomResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientId() {
		if err = oprot.WriteFieldBegin("clientId", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClientId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateRoomResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientToken() {
		if err = oprot.WriteFieldBegin("clientToken", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClientToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateRoomResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoomResp(%+v)", *p)
}

func (p *CreateRoomResp) DeepEqual(ano *CreateRoomResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.RoomId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ClientId) {
		return false
	}
	if !p.Field4DeepEqual(ano.ClientToken) {
		return false
	}
	return true
}

func (p *CreateRoomResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateRoomResp) Field2DeepEqual(src *string) bool {

	if p.RoomId == src {
		return true
	} else if p.RoomId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RoomId, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateRoomResp) Field3DeepEqual(src *string) bool {

	if p.ClientId == src {
		return true
	} else if p.ClientId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClientId, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateRoomResp) Field4DeepEqual(src *string) bool {

	if p.ClientToken == src {
		return true
	} else if p.ClientToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClientToken, *src) != 0 {
		return false
	}
	return true
}

type JoinRoomReq struct {
	RoomId string `thrift:"roomId,1,required" frugal:"1,required,string" json:"roomId"`
}

func NewJoinRoomReq() *JoinRoomReq {
	return &JoinRoomReq{}
}

func (p *JoinRoomReq) InitDefault() {
	*p = JoinRoomReq{}
}

func (p *JoinRoomReq) GetRoomId() (v string) {
	return p.RoomId
}
func (p *JoinRoomReq) SetRoomId(val string) {
	p.RoomId = val
}

var fieldIDToName_JoinRoomReq = map[int16]string{
	1: "roomId",
}

func (p *JoinRoomReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRoomId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRoomId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRoomId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JoinRoomReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_JoinRoomReq[fieldId]))
}

func (p *JoinRoomReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *JoinRoomReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinRoomReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JoinRoomReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("roomId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RoomId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JoinRoomReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinRoomReq(%+v)", *p)
}

func (p *JoinRoomReq) DeepEqual(ano *JoinRoomReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RoomId) {
		return false
	}
	return true
}

func (p *JoinRoomReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.RoomId, src) != 0 {
		return false
	}
	return true
}

type JoinRoomResp struct {
	BaseResp    *base.BaseResp `thrift:"baseResp,1,required" frugal:"1,required,base.BaseResp" json:"baseResp"`
	ClientId    *string        `thrift:"ClientId,2,optional" frugal:"2,optional,string" json:"ClientId,omitempty"`
	ClientToken *string        `thrift:"clientToken,3,optional" frugal:"3,optional,string" json:"clientToken,omitempty"`
}

func NewJoinRoomResp() *JoinRoomResp {
	return &JoinRoomResp{}
}

func (p *JoinRoomResp) InitDefault() {
	*p = JoinRoomResp{}
}

var JoinRoomResp_BaseResp_DEFAULT *base.BaseResp

func (p *JoinRoomResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return JoinRoomResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var JoinRoomResp_ClientId_DEFAULT string

func (p *JoinRoomResp) GetClientId() (v string) {
	if !p.IsSetClientId() {
		return JoinRoomResp_ClientId_DEFAULT
	}
	return *p.ClientId
}

var JoinRoomResp_ClientToken_DEFAULT string

func (p *JoinRoomResp) GetClientToken() (v string) {
	if !p.IsSetClientToken() {
		return JoinRoomResp_ClientToken_DEFAULT
	}
	return *p.ClientToken
}
func (p *JoinRoomResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *JoinRoomResp) SetClientId(val *string) {
	p.ClientId = val
}
func (p *JoinRoomResp) SetClientToken(val *string) {
	p.ClientToken = val
}

var fieldIDToName_JoinRoomResp = map[int16]string{
	1: "baseResp",
	2: "ClientId",
	3: "clientToken",
}

func (p *JoinRoomResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *JoinRoomResp) IsSetClientId() bool {
	return p.ClientId != nil
}

func (p *JoinRoomResp) IsSetClientToken() bool {
	return p.ClientToken != nil
}

func (p *JoinRoomResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseResp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JoinRoomResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_JoinRoomResp[fieldId]))
}

func (p *JoinRoomResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *JoinRoomResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClientId = &v
	}
	return nil
}

func (p *JoinRoomResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClientToken = &v
	}
	return nil
}

func (p *JoinRoomResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinRoomResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JoinRoomResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JoinRoomResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientId() {
		if err = oprot.WriteFieldBegin("ClientId", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClientId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *JoinRoomResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientToken() {
		if err = oprot.WriteFieldBegin("clientToken", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClientToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *JoinRoomResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinRoomResp(%+v)", *p)
}

func (p *JoinRoomResp) DeepEqual(ano *JoinRoomResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.ClientId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ClientToken) {
		return false
	}
	return true
}

func (p *JoinRoomResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *JoinRoomResp) Field2DeepEqual(src *string) bool {

	if p.ClientId == src {
		return true
	} else if p.ClientId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClientId, *src) != 0 {
		return false
	}
	return true
}
func (p *JoinRoomResp) Field3DeepEqual(src *string) bool {

	if p.ClientToken == src {
		return true
	} else if p.ClientToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClientToken, *src) != 0 {
		return false
	}
	return true
}

type GetRoomMembersReq struct {
	RoomId string `thrift:"roomId,1,required" frugal:"1,required,string" json:"roomId"`
}

func NewGetRoomMembersReq() *GetRoomMembersReq {
	return &GetRoomMembersReq{}
}

func (p *GetRoomMembersReq) InitDefault() {
	*p = GetRoomMembersReq{}
}

func (p *GetRoomMembersReq) GetRoomId() (v string) {
	return p.RoomId
}
func (p *GetRoomMembersReq) SetRoomId(val string) {
	p.RoomId = val
}

var fieldIDToName_GetRoomMembersReq = map[int16]string{
	1: "roomId",
}

func (p *GetRoomMembersReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRoomId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRoomId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRoomId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetRoomMembersReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetRoomMembersReq[fieldId]))
}

func (p *GetRoomMembersReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RoomId = v
	}
	return nil
}

func (p *GetRoomMembersReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRoomMembersReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetRoomMembersReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("roomId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RoomId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetRoomMembersReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoomMembersReq(%+v)", *p)
}

func (p *GetRoomMembersReq) DeepEqual(ano *GetRoomMembersReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RoomId) {
		return false
	}
	return true
}

func (p *GetRoomMembersReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.RoomId, src) != 0 {
		return false
	}
	return true
}

type GetRoomMembersResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,1,required" frugal:"1,required,base.BaseResp" json:"baseResp"`
	Members  []string       `thrift:"members,2,optional" frugal:"2,optional,list<string>" json:"members,omitempty"`
}

func NewGetRoomMembersResp() *GetRoomMembersResp {
	return &GetRoomMembersResp{}
}

func (p *GetRoomMembersResp) InitDefault() {
	*p = GetRoomMembersResp{}
}

var GetRoomMembersResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetRoomMembersResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetRoomMembersResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var GetRoomMembersResp_Members_DEFAULT []string

func (p *GetRoomMembersResp) GetMembers() (v []string) {
	if !p.IsSetMembers() {
		return GetRoomMembersResp_Members_DEFAULT
	}
	return p.Members
}
func (p *GetRoomMembersResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *GetRoomMembersResp) SetMembers(val []string) {
	p.Members = val
}

var fieldIDToName_GetRoomMembersResp = map[int16]string{
	1: "baseResp",
	2: "members",
}

func (p *GetRoomMembersResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetRoomMembersResp) IsSetMembers() bool {
	return p.Members != nil
}

func (p *GetRoomMembersResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseResp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetRoomMembersResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetRoomMembersResp[fieldId]))
}

func (p *GetRoomMembersResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetRoomMembersResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Members = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Members = append(p.Members, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetRoomMembersResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRoomMembersResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetRoomMembersResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetRoomMembersResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMembers() {
		if err = oprot.WriteFieldBegin("members", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Members)); err != nil {
			return err
		}
		for _, v := range p.Members {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetRoomMembersResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoomMembersResp(%+v)", *p)
}

func (p *GetRoomMembersResp) DeepEqual(ano *GetRoomMembersResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Members) {
		return false
	}
	return true
}

func (p *GetRoomMembersResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetRoomMembersResp) Field2DeepEqual(src []string) bool {

	if len(p.Members) != len(src) {
		return false
	}
	for i, v := range p.Members {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type RoomService interface {
	CreateRoom(ctx context.Context) (r *CreateRoomResp, err error)

	JoinRoom(ctx context.Context, req *JoinRoomReq) (r *JoinRoomResp, err error)

	GetRoomMembers(ctx context.Context, req *GetRoomMembersReq) (r *GetRoomMembersResp, err error)
}

type RoomServiceClient struct {
	c thrift.TClient
}

func NewRoomServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RoomServiceClient {
	return &RoomServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewRoomServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RoomServiceClient {
	return &RoomServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewRoomServiceClient(c thrift.TClient) *RoomServiceClient {
	return &RoomServiceClient{
		c: c,
	}
}

func (p *RoomServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *RoomServiceClient) CreateRoom(ctx context.Context) (r *CreateRoomResp, err error) {
	var _args RoomServiceCreateRoomArgs
	var _result RoomServiceCreateRoomResult
	if err = p.Client_().Call(ctx, "CreateRoom", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RoomServiceClient) JoinRoom(ctx context.Context, req *JoinRoomReq) (r *JoinRoomResp, err error) {
	var _args RoomServiceJoinRoomArgs
	_args.Req = req
	var _result RoomServiceJoinRoomResult
	if err = p.Client_().Call(ctx, "JoinRoom", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RoomServiceClient) GetRoomMembers(ctx context.Context, req *GetRoomMembersReq) (r *GetRoomMembersResp, err error) {
	var _args RoomServiceGetRoomMembersArgs
	_args.Req = req
	var _result RoomServiceGetRoomMembersResult
	if err = p.Client_().Call(ctx, "GetRoomMembers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type RoomServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RoomService
}

func (p *RoomServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RoomServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RoomServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRoomServiceProcessor(handler RoomService) *RoomServiceProcessor {
	self := &RoomServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateRoom", &roomServiceProcessorCreateRoom{handler: handler})
	self.AddToProcessorMap("JoinRoom", &roomServiceProcessorJoinRoom{handler: handler})
	self.AddToProcessorMap("GetRoomMembers", &roomServiceProcessorGetRoomMembers{handler: handler})
	return self
}
func (p *RoomServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type roomServiceProcessorCreateRoom struct {
	handler RoomService
}

func (p *roomServiceProcessorCreateRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceCreateRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RoomServiceCreateRoomResult{}
	var retval *CreateRoomResp
	if retval, err2 = p.handler.CreateRoom(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateRoom: "+err2.Error())
		oprot.WriteMessageBegin("CreateRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorJoinRoom struct {
	handler RoomService
}

func (p *roomServiceProcessorJoinRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceJoinRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("JoinRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RoomServiceJoinRoomResult{}
	var retval *JoinRoomResp
	if retval, err2 = p.handler.JoinRoom(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing JoinRoom: "+err2.Error())
		oprot.WriteMessageBegin("JoinRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("JoinRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type roomServiceProcessorGetRoomMembers struct {
	handler RoomService
}

func (p *roomServiceProcessorGetRoomMembers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RoomServiceGetRoomMembersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRoomMembers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RoomServiceGetRoomMembersResult{}
	var retval *GetRoomMembersResp
	if retval, err2 = p.handler.GetRoomMembers(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRoomMembers: "+err2.Error())
		oprot.WriteMessageBegin("GetRoomMembers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRoomMembers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type RoomServiceCreateRoomArgs struct {
}

func NewRoomServiceCreateRoomArgs() *RoomServiceCreateRoomArgs {
	return &RoomServiceCreateRoomArgs{}
}

func (p *RoomServiceCreateRoomArgs) InitDefault() {
	*p = RoomServiceCreateRoomArgs{}
}

var fieldIDToName_RoomServiceCreateRoomArgs = map[int16]string{}

func (p *RoomServiceCreateRoomArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RoomServiceCreateRoomArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("CreateRoom_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RoomServiceCreateRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceCreateRoomArgs(%+v)", *p)
}

func (p *RoomServiceCreateRoomArgs) DeepEqual(ano *RoomServiceCreateRoomArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type RoomServiceCreateRoomResult struct {
	Success *CreateRoomResp `thrift:"success,0,optional" frugal:"0,optional,CreateRoomResp" json:"success,omitempty"`
}

func NewRoomServiceCreateRoomResult() *RoomServiceCreateRoomResult {
	return &RoomServiceCreateRoomResult{}
}

func (p *RoomServiceCreateRoomResult) InitDefault() {
	*p = RoomServiceCreateRoomResult{}
}

var RoomServiceCreateRoomResult_Success_DEFAULT *CreateRoomResp

func (p *RoomServiceCreateRoomResult) GetSuccess() (v *CreateRoomResp) {
	if !p.IsSetSuccess() {
		return RoomServiceCreateRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceCreateRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateRoomResp)
}

var fieldIDToName_RoomServiceCreateRoomResult = map[int16]string{
	0: "success",
}

func (p *RoomServiceCreateRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceCreateRoomResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RoomServiceCreateRoomResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RoomServiceCreateRoomResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateRoomResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RoomServiceCreateRoomResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRoom_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RoomServiceCreateRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RoomServiceCreateRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceCreateRoomResult(%+v)", *p)
}

func (p *RoomServiceCreateRoomResult) DeepEqual(ano *RoomServiceCreateRoomResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RoomServiceCreateRoomResult) Field0DeepEqual(src *CreateRoomResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type RoomServiceJoinRoomArgs struct {
	Req *JoinRoomReq `thrift:"req,1" frugal:"1,default,JoinRoomReq" json:"req"`
}

func NewRoomServiceJoinRoomArgs() *RoomServiceJoinRoomArgs {
	return &RoomServiceJoinRoomArgs{}
}

func (p *RoomServiceJoinRoomArgs) InitDefault() {
	*p = RoomServiceJoinRoomArgs{}
}

var RoomServiceJoinRoomArgs_Req_DEFAULT *JoinRoomReq

func (p *RoomServiceJoinRoomArgs) GetReq() (v *JoinRoomReq) {
	if !p.IsSetReq() {
		return RoomServiceJoinRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceJoinRoomArgs) SetReq(val *JoinRoomReq) {
	p.Req = val
}

var fieldIDToName_RoomServiceJoinRoomArgs = map[int16]string{
	1: "req",
}

func (p *RoomServiceJoinRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceJoinRoomArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RoomServiceJoinRoomArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RoomServiceJoinRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewJoinRoomReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RoomServiceJoinRoomArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinRoom_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RoomServiceJoinRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RoomServiceJoinRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceJoinRoomArgs(%+v)", *p)
}

func (p *RoomServiceJoinRoomArgs) DeepEqual(ano *RoomServiceJoinRoomArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *RoomServiceJoinRoomArgs) Field1DeepEqual(src *JoinRoomReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type RoomServiceJoinRoomResult struct {
	Success *JoinRoomResp `thrift:"success,0,optional" frugal:"0,optional,JoinRoomResp" json:"success,omitempty"`
}

func NewRoomServiceJoinRoomResult() *RoomServiceJoinRoomResult {
	return &RoomServiceJoinRoomResult{}
}

func (p *RoomServiceJoinRoomResult) InitDefault() {
	*p = RoomServiceJoinRoomResult{}
}

var RoomServiceJoinRoomResult_Success_DEFAULT *JoinRoomResp

func (p *RoomServiceJoinRoomResult) GetSuccess() (v *JoinRoomResp) {
	if !p.IsSetSuccess() {
		return RoomServiceJoinRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceJoinRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*JoinRoomResp)
}

var fieldIDToName_RoomServiceJoinRoomResult = map[int16]string{
	0: "success",
}

func (p *RoomServiceJoinRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceJoinRoomResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RoomServiceJoinRoomResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RoomServiceJoinRoomResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewJoinRoomResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RoomServiceJoinRoomResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinRoom_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RoomServiceJoinRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RoomServiceJoinRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceJoinRoomResult(%+v)", *p)
}

func (p *RoomServiceJoinRoomResult) DeepEqual(ano *RoomServiceJoinRoomResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RoomServiceJoinRoomResult) Field0DeepEqual(src *JoinRoomResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type RoomServiceGetRoomMembersArgs struct {
	Req *GetRoomMembersReq `thrift:"req,1" frugal:"1,default,GetRoomMembersReq" json:"req"`
}

func NewRoomServiceGetRoomMembersArgs() *RoomServiceGetRoomMembersArgs {
	return &RoomServiceGetRoomMembersArgs{}
}

func (p *RoomServiceGetRoomMembersArgs) InitDefault() {
	*p = RoomServiceGetRoomMembersArgs{}
}

var RoomServiceGetRoomMembersArgs_Req_DEFAULT *GetRoomMembersReq

func (p *RoomServiceGetRoomMembersArgs) GetReq() (v *GetRoomMembersReq) {
	if !p.IsSetReq() {
		return RoomServiceGetRoomMembersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RoomServiceGetRoomMembersArgs) SetReq(val *GetRoomMembersReq) {
	p.Req = val
}

var fieldIDToName_RoomServiceGetRoomMembersArgs = map[int16]string{
	1: "req",
}

func (p *RoomServiceGetRoomMembersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RoomServiceGetRoomMembersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RoomServiceGetRoomMembersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RoomServiceGetRoomMembersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRoomMembersReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RoomServiceGetRoomMembersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRoomMembers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RoomServiceGetRoomMembersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RoomServiceGetRoomMembersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceGetRoomMembersArgs(%+v)", *p)
}

func (p *RoomServiceGetRoomMembersArgs) DeepEqual(ano *RoomServiceGetRoomMembersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *RoomServiceGetRoomMembersArgs) Field1DeepEqual(src *GetRoomMembersReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type RoomServiceGetRoomMembersResult struct {
	Success *GetRoomMembersResp `thrift:"success,0,optional" frugal:"0,optional,GetRoomMembersResp" json:"success,omitempty"`
}

func NewRoomServiceGetRoomMembersResult() *RoomServiceGetRoomMembersResult {
	return &RoomServiceGetRoomMembersResult{}
}

func (p *RoomServiceGetRoomMembersResult) InitDefault() {
	*p = RoomServiceGetRoomMembersResult{}
}

var RoomServiceGetRoomMembersResult_Success_DEFAULT *GetRoomMembersResp

func (p *RoomServiceGetRoomMembersResult) GetSuccess() (v *GetRoomMembersResp) {
	if !p.IsSetSuccess() {
		return RoomServiceGetRoomMembersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RoomServiceGetRoomMembersResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetRoomMembersResp)
}

var fieldIDToName_RoomServiceGetRoomMembersResult = map[int16]string{
	0: "success",
}

func (p *RoomServiceGetRoomMembersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RoomServiceGetRoomMembersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RoomServiceGetRoomMembersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RoomServiceGetRoomMembersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetRoomMembersResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RoomServiceGetRoomMembersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRoomMembers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RoomServiceGetRoomMembersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RoomServiceGetRoomMembersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RoomServiceGetRoomMembersResult(%+v)", *p)
}

func (p *RoomServiceGetRoomMembersResult) DeepEqual(ano *RoomServiceGetRoomMembersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RoomServiceGetRoomMembersResult) Field0DeepEqual(src *GetRoomMembersResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
